from DGGSForPoly import poly_fill
from get_data import get_static_test_data_square, get_static_test_data_Black_Mountain, get_poly_fill_ex2_non_hybrid_answer
from DGGSForPoly.cell_area import area_of_cells
from math import isclose


'''
def func(x):
    return x + 1
def test_answer():
    assert func(3) == 4
'''

def test_poly_fill_ex1(): # square
    geojson_data = get_static_test_data_square()['features'][0]['geometry']
    cells = poly_fill.poly_fill(geojson=geojson_data, max_res=8)
    cells.sort()
    assert cells == ['R78474647', 'R78474648', 'R78474656', 'R78474657', 'R78474658', 'R78474671', 'R78474672', 'R78474674', 'R78474675', 'R78474677', 'R78474678', 'R7847468', 'R78474736', 'R78474737', 'R78474738', 'R78474746', 'R78474747', 'R78474748', 'R78474756', 'R78474757', 'R78474758', 'R7847476', 'R7847477', 'R7847478', 'R78474836', 'R78474837', 'R78474838', 'R78474846', 'R78474847', 'R78474848', 'R78474856', 'R7847486', 'R7847487', 'R78474880', 'R78474883', 'R78474886', 'R78477011', 'R78477012', 'R78477014', 'R78477015', 'R78477017', 'R78477018', 'R7847702', 'R78477041', 'R78477042', 'R78477044', 'R78477045', 'R78477047', 'R78477048', 'R7847705', 'R78477071', 'R78477072', 'R78477074', 'R78477075', 'R78477077', 'R78477078', 'R7847708', 'R784771', 'R7847720', 'R7847721', 'R78477220', 'R78477223', 'R78477226', 'R7847723', 'R7847724', 'R78477250', 'R78477253', 'R78477256', 'R7847726', 'R7847727', 'R78477280', 'R78477283', 'R78477286', 'R78477311', 'R78477312', 'R78477320', 'R78477321', 'R78477322', 'R78477400', 'R78477401', 'R78477402', 'R78477410', 'R78477411', 'R78477412', 'R78477420', 'R78477421', 'R78477422', 'R78477500', 'R78477501', 'R78477502', 'R78477510', 'R78477511', 'R78477512', 'R78477520']
    area = area_of_cells(cells=cells)
    assert(isclose(area, 581258370.5201219, abs_tol = 0.00001) )


def test_poly_fill_ex1_non_hybrid(): # square non hybrid
    geojson_data = get_static_test_data_square()['features'][0]['geometry']
    cells = poly_fill.poly_fill(geojson=geojson_data, max_res=8, hybrid=False)
    cells.sort()
    assert cells == ['R78474647', 'R78474648', 'R78474656', 'R78474657', 'R78474658', 'R78474671', 'R78474672', 'R78474674', 'R78474675', 'R78474677', 'R78474678', 'R78474680', 'R78474681', 'R78474682', 'R78474683', 'R78474684', 'R78474685', 'R78474686', 'R78474687', 'R78474688', 'R78474736', 'R78474737', 'R78474738', 'R78474746', 'R78474747', 'R78474748', 'R78474756', 'R78474757', 'R78474758', 'R78474760', 'R78474761', 'R78474762', 'R78474763', 'R78474764', 'R78474765', 'R78474766', 'R78474767', 'R78474768', 'R78474770', 'R78474771', 'R78474772', 'R78474773', 'R78474774', 'R78474775', 'R78474776', 'R78474777', 'R78474778', 'R78474780', 'R78474781', 'R78474782', 'R78474783', 'R78474784', 'R78474785', 'R78474786', 'R78474787', 'R78474788', 'R78474836', 'R78474837', 'R78474838', 'R78474846', 'R78474847', 'R78474848', 'R78474856', 'R78474860', 'R78474861', 'R78474862', 'R78474863', 'R78474864', 'R78474865', 'R78474866', 'R78474867', 'R78474868', 'R78474870', 'R78474871', 'R78474872', 'R78474873', 'R78474874', 'R78474875', 'R78474876', 'R78474877', 'R78474878', 'R78474880', 'R78474883', 'R78474886', 'R78477011', 'R78477012', 'R78477014', 'R78477015', 'R78477017', 'R78477018', 'R78477020', 'R78477021', 'R78477022', 'R78477023', 'R78477024', 'R78477025', 'R78477026', 'R78477027', 'R78477028', 'R78477041', 'R78477042', 'R78477044', 'R78477045', 'R78477047', 'R78477048', 'R78477050', 'R78477051', 'R78477052', 'R78477053', 'R78477054', 'R78477055', 'R78477056', 'R78477057', 'R78477058', 'R78477071', 'R78477072', 'R78477074', 'R78477075', 'R78477077', 'R78477078', 'R78477080', 'R78477081', 'R78477082', 'R78477083', 'R78477084', 'R78477085', 'R78477086', 'R78477087', 'R78477088', 'R78477100', 'R78477101', 'R78477102', 'R78477103', 'R78477104', 'R78477105', 'R78477106', 'R78477107', 'R78477108', 'R78477110', 'R78477111', 'R78477112', 'R78477113', 'R78477114', 'R78477115', 'R78477116', 'R78477117', 'R78477118', 'R78477120', 'R78477121', 'R78477122', 'R78477123', 'R78477124', 'R78477125', 'R78477126', 'R78477127', 'R78477128', 'R78477130', 'R78477131', 'R78477132', 'R78477133', 'R78477134', 'R78477135', 'R78477136', 'R78477137', 'R78477138', 'R78477140', 'R78477141', 'R78477142', 'R78477143', 'R78477144', 'R78477145', 'R78477146', 'R78477147', 'R78477148', 'R78477150', 'R78477151', 'R78477152', 'R78477153', 'R78477154', 'R78477155', 'R78477156', 'R78477157', 'R78477158', 'R78477160', 'R78477161', 'R78477162', 'R78477163', 'R78477164', 'R78477165', 'R78477166', 'R78477167', 'R78477168', 'R78477170', 'R78477171', 'R78477172', 'R78477173', 'R78477174', 'R78477175', 'R78477176', 'R78477177', 'R78477178', 'R78477180', 'R78477181', 'R78477182', 'R78477183', 'R78477184', 'R78477185', 'R78477186', 'R78477187', 'R78477188', 'R78477200', 'R78477201', 'R78477202', 'R78477203', 'R78477204', 'R78477205', 'R78477206', 'R78477207', 'R78477208', 'R78477210', 'R78477211', 'R78477212', 'R78477213', 'R78477214', 'R78477215', 'R78477216', 'R78477217', 'R78477218', 'R78477220', 'R78477223', 'R78477226', 'R78477230', 'R78477231', 'R78477232', 'R78477233', 'R78477234', 'R78477235', 'R78477236', 'R78477237', 'R78477238', 'R78477240', 'R78477241', 'R78477242', 'R78477243', 'R78477244', 'R78477245', 'R78477246', 'R78477247', 'R78477248', 'R78477250', 'R78477253', 'R78477256', 'R78477260', 'R78477261', 'R78477262', 'R78477263', 'R78477264', 'R78477265', 'R78477266', 'R78477267', 'R78477268', 'R78477270', 'R78477271', 'R78477272', 'R78477273', 'R78477274', 'R78477275', 'R78477276', 'R78477277', 'R78477278', 'R78477280', 'R78477283', 'R78477286', 'R78477311', 'R78477312', 'R78477320', 'R78477321', 'R78477322', 'R78477400', 'R78477401', 'R78477402', 'R78477410', 'R78477411', 'R78477412', 'R78477420', 'R78477421', 'R78477422', 'R78477500', 'R78477501', 'R78477502', 'R78477510', 'R78477511', 'R78477512', 'R78477520']
    area = area_of_cells(cells=cells)
    assert(isclose(area, 581258370.5201219, abs_tol = 0.00001) ) # should equal area from hybrid.


def test_poly_fill_ex2_non_hybrid(): # black mouintain (first poly) non-hybrid.
    geojson_data = get_static_test_data_Black_Mountain()['features'][0]['geometry'] # just do it for the first poly of the 3.
    cells = poly_fill.poly_fill(geojson=geojson_data, max_res=10, hybrid=False)
    cells.sort()
    assert cells == get_poly_fill_ex2_non_hybrid_answer()